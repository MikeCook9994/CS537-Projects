TODO: Create_Thread
1) The user library is a user program in the user program directory
2) include user library functions in user.h
3) include structures in types.h
4) The thread stack exists in the heap and should be 4096 bytes, page aligned
5) Maintain a hashtable  of PID/Stack Regions
6) returns newly created threads PID

TODO: Clone system call
1) Don't call copyuvm, it shares fields with the parent.
2) copy arguments, use relevant fork code
3) Use later code from exec to set up stack and begin execution
4) Maintain a new field to differentiate processes and threads
5) A thread cannot be a parent of a thread. The process will be the parents
6) Execution should be begin from the given function pointer

TODO: thread_join
1) invoke a system call for wait for the the thread
2) free the threads stack
3) return PID of child or -1 if it the thread does not exist
4) if -1 is passed as a parameter, wait for first thread to complete

TODO: Join system call
1) waits for a child thread to complete

TODO: wait system call needs to be modified to verify the child is actually a process and not a thread

TODO: exit system call
1) if it's a process call a join for all the child threads
2) wake up the parent and allow it to clean up the PCB

TODO: need to make sbrk thread safe

TODO: growproc needs to update the size field of all the pcb's

locks
1) typedef lock_t 
2) implement lock_init, lock_acquire_lock_release
3) It is not a spinlock but rather a ticket lock
4) check wikipedia for fetch and add implementation that the lock will use

TODO: cv_wait
1) need to implement a system call to sleep the thread
2) upon waking, attempt to acquire the lock

TODO: cv_sleep
1) choose a thread from the waiting list
2) wake up that thread
3) need another system call to wake up the thread
